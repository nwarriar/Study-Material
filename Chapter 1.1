CHAPTER 1:DECLARATIONS AND ACCESS CONTROL
*********************************************
Every object is of a certain type which is defined by class/interface.
An object will have its own state and access to all of the behaviours defined by its class.
State(instance variables):Values assigned to an object's instance variables is object's state
Behaviour(methods)
---------------------------------------------------------------------------------------------------------
Identifiers:names of classes,methods,variables
			Must start with a letter,a currency character($),or a connecting char(_);cannot start with a digit
			case-sensitive
---------------------------------------------------------------------------------------------------------			
Keywords cannot be used as identifiers
List of keywords:abstract
				assert(added in 1.4)			long
				boolean							native
				break							new
				byte							package
				case							private
				catch							protected
				class							public
				char							return
				const 							switch
				continue						super
				default							short
				do								static
				double							strictfp
				else							synchronized
				extends							this
				enum(1.5)						throw
				final							throws
				finally							transient
				for								try
				float							void
				goto							volatile
				int								while
				if
				interface
				implements
				import 
				instanceOf
---------------------------------------------------------------------------------------------------------				
Naming Conventions:Classes(nouns) and interfaces(adjectives) -first letter capital of every word(Camel Case)
				Methods(verb-noun pairs)-first letter small and later Camel Case
				Variables-like methods
				Constants-static and final;uppercase letters;separated by _
---------------------------------------------------------------------------------------------------------				
There can be only one public class per source code file.The name of the file must match the name of the public
class.Files with no public classes can have a name that does not match any of the
classes in the file.
---------------------------------------------------------------------------------------------------------
The javac command is used to invoke Java's compiler.
javac [options] [source files]  Both are optional parts of the command, and both allow multiple entries separated by spaces
The java command is used to invoke the Java Virtual Machine (JVM).
java [options] class [args] options and args optional;multiple values

public static void main(String[] args)
args—like all arrays—uses a zero-based index.
---------------------------------------------------------------------------------------------------------
Legal declarations of main() method:
public static void main(String[] args)
static public void main(String[] args)
public static void main(String... x)
static public void main(String bang_a_gong[])

main() can be overloaded
---------------------------------------------------------------------------------------------------------
import java.util.ArrayList;
In the Java API there is a package called 'util', and in that package is a class called 'ArrayList'

Its okay to do this:
ArrayList<String> a = new ArrayList<String>();
java.util.ArrayList<String> a2 = new java.util.ArrayList<String>();
---------------------------------------------------------------------------------------------------------
Static imports:
save typing while using a class' static members
out field in the System class is a static member
you must say import static and not static import
you can do static import on:static object references,static methods and constants(static and final)
Before static imports:
public class TestStatic {
public static void main(String[] args) {
System.out.println(Integer.MAX_VALUE);
System.out.println(Integer.toHexString(42));
}
}

After static imports:
import static java.lang.System.out; // 1
import static java.lang.Integer.*; // 2
public class TestStaticImport {
public static void main(String[] args) {
out.println(MAX_VALUE); // 3
out.println(toHexString(42)); // 4
}
}
Both classes produce the same output:
2147483647
2a

import java.*; // Legal, but this WILL NOT search across packages.
---------------------------------------------------------------------------------------------------------
Class declarations and modifiers:
Access modifiers:public,private,protected
Nonaccess modifiers:including strictfp,final and abstract
There are four access controls(levels of access) but only three access modifiers
Class can be declared public/default
When a class is declared public,it can be accessed by all classes in all packages unless the class is also
marked as final.

Non access modifiers:
strictfp:any method code in the class will conform to the IEEE 754 standard rules for floating points
You are free to use strictfp with final
But never mark a class as abstract and final together(compiler error);because abstract must be subclassed and final must not be. 
strictfp is a keyword to modify a class/method;not a variable

final:
A final class cannot be subclassed;if you do so then compiler error
Methods of final can never be overriden
String class is final.

Abstract:
Abstract classes can never be instantiated.
Methods marked abstract end in a semicolon rather than curly braces.
You can put non abstract methods in an abstract class.By putting non abstract methods,you give all concrete 
subclasses inherited method implementations.They need to implement only methods that define subclass specific behaviour.
Even if a single method is abstract,the whole class must be declared abstract.
---------------------------------------------------------------------------------------------------------
Interfaces:
Allows you to take radically different classes and give them a common characteristic.
The implementing class must do:All interface methods must be implemented and must be marked public
Interface can have only abstract methods
All interface methods are implicitly public and abstract;methods must not be static;methods cannot be marked final,strictfp or native
All variables declared in an interface are public,static and final.Interface can have only constants;not instance variables
Interface can extend only interfaces;extends one or more interfaces;cannot implement another interface/class
Interfaces are implicitly abstract.public is required else it will be default
Both these declarations are legal and functionally identical:
public abstract interface Rollable { }
public interface Rollable { }
Any variable defined in an interface is implicitly constant.
Once the variable has been assigned a value in an interface,the value cannot be changed by another class.
Compilation error:The final field cannot be assigned
A legal non abstract implementing class must not declare any new checked exceptions for an implementation
method;it must not declare any exception broader than the exceptions declared in the interface method;
it may declare runtime exception on any interface method implementation regardless of interface declaration
A class implementing an interface can itself be abstract;abstract class need not implement all the methods

A class can implement many interfaces.
Interface can extend one or more interfaces.
Interfaces cannot extend a class/implement a class/interface

Class Access:
---------------------------------------------------------------------------------------------------------
When we say class A has access to class B it means:
A can create an instance of B
A can extend B
Access certain methods and variables in B depending on access modifiers in B

//When you see codes with complex logic,look for the access modifiers first.(Compilation error)

If class A itself cannot be accessed by class B then no members of class A can be accessed by class B

When you see a method/variable being invoked without a dot operator,it means that method/variable is implicitly
being accessed by this reference.

When a member is declared private,a subclass cannot inherit it.You can declare a matching method in the superclass
but it is not overriding a method.A method marked private cannot be overriden.

protected=inheritance
Subclasses outside the package cannot use a superclass reference to access a protected member.
For a subclass outside the package,the protected member can be accessed only through inheritance.
Once the subclass-outside-the-package inherits the protected member,that member becomes private to any code
outside to the subclass with the exception of subclasses of the subclass.

Access modifiers can never be applied to local variables.
The only modifier that can be applied to a local variable is final.

Nonaccess Member Modifiers:
1.final:
prevents a method from being overriden in a subclass
method arguments:variable declarations that appear between () in a method declaration
they are same as local variables;so they can be final

2.abstract
abstract method declaration ends with a semicolon
you can have an abstract class with no abstract methods
the first concrete subclass of an abstract class must implement all abstract methods of superclass
if the subclass is abstract,it is not required to implement the abstract methods,but it is allowed to
implement any or all of the superclass abstract methods
abstract designation means the superclass does not know anything about how the subclasses should behave
in that method.
For top level classes,abstract can never be combined with static modifier

public abstract class A {
abstract void foo();
}
class B extends A {
void foo(int I) { }
}

Method in class B is an overloaded method.So class B wont compile.

3.synchronized (methods)
method can be accessed only by one thread at a time
it can be only applied to methods
it can be matched with any of the four access control levels(3 access modifier keywords)

4.native(methods)
method is implemented in platform dependent code often in c
native is a reserved keyword;only to methods
native method's body must be a ; like abstract methods(implementation omitted)

5.strictfp(methods/class)
forces floating points and any floating point operations to adhere to the IEEE 754 standards
you can predict how your floating point will behave irrespective of the platform jvm is running on
---------------------------------------------------------------------------------------------------------
var-args:
its legal to have other parameters in a method that uses a var-arg
the var-arg must be the last parameter in the method's signature 
you can have only one var-arg in a method

Legal:
void doStuff(int... x) { } // expects from 0 to many ints
							// as parameters
void doStuff2(char c, int... x) { } // expects first a char,
								// then 0 to many ints
void doStuff3(Animal... animal) { } // 0 to many Animals

Illegal:
void doStuff4(int x...) { } // bad syntax
void doStuff5(int... x, char... y) { } // too many var-args
void doStuff6(String... s, byte b) { } // var-arg must be last
---------------------------------------------------------------------------------------------------------
Constructors:
no return type
every time a new object;a constructor is invoked
same name as the class name
cannot be marked static,final or abstract
---------------------------------------------------------------------------------------------------------
Variables in Java:
Primitive:char,boolean,byte,short,int,long,double,float;once declared it can never change
Reference:declared of a specific type and that type can never change
Sequence from small to big is byte,short,int and long;doubles are bigger than floats
sign bit:0-positive;1-negative

Type	Bits	Bytes	Minimum		Maximum
byte	8		1		-2^7		2^7-1
short	16		2		-2^15		2^15-1
int		32		4		-2^31		2^31-1
long	64		8		-2^63		2^63-1
float	32		4		na			na
double	64		8		na			na

bit depth of a boolean:virtual machine dependent
The char type contains a single 16 bit Unicode character

Instance variables:
outside any method;inside class
initialized only when the class is instantiated
fields that belong to each unique object
can use any of the four access levels
can be marked final,transient
cannot be marked abstract,synchronized,strictfp,native,static

Local variables(Automatic/Stack/Method):
Declared and initialized within the method
Always on the stack and not on the heap
If the variable is a reference,object will be created on the heap.
can be marked final
Unlike instance variables,local variables do not get a default value.So local var must be initialized before
using
It is possible to declare a local var with the same name as instance var=shadowing
---------------------------------------------------------------------------------------------------------
Arrays:
Arrays are objects that store multiple variables of the same type or variables that are subclasses of the 
same type
Array will always be an object on the heap

int[] key
int key [] //legal;but less readable
It is never legal to include the size of the array in your declaration.JVM does not allocate space until
you instantiate the array object.
---------------------------------------------------------------------------------------------------------
Final variables:
There are no final objects;only final references

Transient variables:
If you mark a variable as transient,you are telling JVM to ignore this variable when you attempt to
serialize the object containing it

Volatile variables:Can be applied only to instance variables
---------------------------------------------------------------------------------------------------------
Static variables and methods:
All static members exist before you ever make a instance of a class
All instances of a class share the same value for any given static variable

Things you can mark as static:
Methods,variables,a class nested within another class but not within another method,initialization blocks

Things you cannot mark as static:
Constructors,classes(until nested),interfaces(until nested),method local inner classes,inner class methods
and instance variables,local variables
---------------------------------------------------------------------------------------------------------
Enums:
the items in the enumerated list are called enums
Enums can be declared as their own separate class or as a class member but not declared within a method
Enum that is not enclosed in a class can be public/default.
Syntax for accessing enum depends on where the enum was declared.
Each of the enumerated type is an instance of enum class.
You can define more than one argument in an enum constructor
You can overload enum constructor like a normal class constructor
you can never invoke enum constructor directly
You can define a constant specific class body in an enum when you need a particular constant to override 
a method defined in the enum.
---------------------------------------------------------------------------------------------------------
Remember:
Final methods cannot be overriden;final classes cannot be subclassed
Values of non final variables can change.A reference variable's type can never be changed.
Arrays can also contain other arrays.
A file can have only one package statement;but multiple import statements
Members accessed without the dot operator must belong to the same class.
private members cannot be inherited.
local variables cannot have access modifiers.
final is the only modifier available to local variables.
local variables do not get default values.
synchronized modifier applies only to methods and code blocks.
synchronized methods can have any access control and can also be marked final.
native modiifer applies only to methods.
strictfp modifier applies to classes and methods.
Instance variables can have any access control;can be final or transient;cant be abstract,native,syncronized,strictfp.
final variables must be initialized before the constructor completes.
transient and volatile applies only to instance variables.
It is never legal to include the size of the array in the declaration.
There is only one copy of static variable/class and all instances share it.
static methods do not have direct access to non static members.
enum constructors can never be invoked directly;automatically called when enum is initialized
---------------------------------------------------------------------------------------------------------





 
 
